// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(FuminiHotelSystemContext))]
    partial class FuminiHotelSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.BookingDetail", b =>
                {
                    b.Property<int>("BookingReservationId")
                        .HasColumnType("int")
                        .HasColumnName("BookingReservationID");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<decimal>("ActualPrice")
                        .HasColumnType("money");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("BookingReservationId", "RoomId");

                    b.HasIndex("RoomId");

                    b.HasIndex(new[] { "BookingReservationId" }, "IX_BookingDetail")
                        .IsUnique();

                    b.ToTable("BookingDetail", (string)null);
                });

            modelBuilder.Entity("Model.BookingReservation", b =>
                {
                    b.Property<int>("BookingReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingReservationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingReservationId"));

                    b.Property<bool>("BooingStatus")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("BookingReservationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookingReservation", (string)null);
                });

            modelBuilder.Entity("Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateOnly>("CustomerBirthDay")
                        .HasColumnType("date");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("CustomerStatus")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelePhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Model.RoomInfomation", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("RoomDetailDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoomMaxCapacity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("RoomPricePerDay")
                        .HasColumnType("money");

                    b.Property<bool>("RoomStatus")
                        .HasColumnType("bit");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RoomTypeID");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RoomInfomation", (string)null);
                });

            modelBuilder.Entity("Model.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoomTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"));

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomType", (string)null);
                });

            modelBuilder.Entity("Model.BookingDetail", b =>
                {
                    b.HasOne("Model.BookingReservation", "BookingReservation")
                        .WithOne("BookingDetail")
                        .HasForeignKey("Model.BookingDetail", "BookingReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingDetail_BookingReservation");

                    b.HasOne("Model.RoomInfomation", "Room")
                        .WithMany("BookingDetails")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingDetail_RoomInfomation");

                    b.Navigation("BookingReservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Model.BookingReservation", b =>
                {
                    b.HasOne("Model.Customer", "Customer")
                        .WithMany("BookingReservations")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingReservation_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Model.RoomInfomation", b =>
                {
                    b.HasOne("Model.RoomType", "RoomType")
                        .WithMany("RoomInfomations")
                        .HasForeignKey("RoomTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RoomInfomation_RoomType");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Model.BookingReservation", b =>
                {
                    b.Navigation("BookingDetail");
                });

            modelBuilder.Entity("Model.Customer", b =>
                {
                    b.Navigation("BookingReservations");
                });

            modelBuilder.Entity("Model.RoomInfomation", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("Model.RoomType", b =>
                {
                    b.Navigation("RoomInfomations");
                });
#pragma warning restore 612, 618
        }
    }
}
